{"ast":null,"code":"puzzle = shuffle(3, 3);\ndest = createDest(3, 3);\nastar(puzzle, dest);\nfunction createDest(m, n) {\n  let dest = Array.from({\n    length: m\n  }, (_, i) => Array.from({\n    length: n\n  }, (_, j) => i * n + j + 1));\n  dest[m - 1][n - 1] = 0;\n  return dest;\n}\nfunction parity(puzzle) {\n  const m = puzzle.length,\n    n = puzzle[0].length;\n  let flatten = Array(m * n).fill(null).map((_, i) => puzzle[Math.floor(i / n)][i % n]);\n  let cnt = 0,\n    pair;\n  for (let i = 0; i < m * n; i++) {\n    for (let j = i + 1; j < m * n; j++) {\n      if (flatten[i] != 0 && flatten[j] != 0 && flatten[i] > flatten[j]) {\n        cnt += 1;\n        pair = [i, j];\n      }\n    }\n  }\n  if (cnt % 2 == 1) {\n    let i = pair[0],\n      j = pair[1];\n    let tmp = puzzle[Math.floor(i / n)][i % n];\n    puzzle[Math.floor(i / n)][i % n] = puzzle[Math.floor(j / n)][j % n];\n    puzzle[Math.floor(j / n)][j % n] = tmp;\n  }\n}\nfunction shuffle(m, n) {\n  let shuffled = Array.from({\n    length: m * n\n  }, (_, i) => i);\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  let puzzle = Array.from({\n    length: m\n  }, (_, i) => shuffled.slice(i * n, (i + 1) * n));\n  parity(puzzle);\n  return puzzle;\n}\nfunction heuristic(dest) {\n  const m = dest.length;\n  const n = dest[0].length;\n  const locs = Array.from({\n    length: m * n\n  }, () => [0, 0]);\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      locs[dest[i][j]] = [i, j];\n    }\n  }\n  function manhattans(status) {\n    let puzzle = JSON.parse(status);\n    let distance = 0;\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        const [x, y] = locs[puzzle[i][j]];\n        const manhattan = Math.abs(x - i) + Math.abs(y - j);\n        distance += manhattan;\n      }\n    }\n    return distance;\n  }\n  return manhattans;\n}\nfunction locateZero(puzzle) {\n  for (let i = 0; i < puzzle.length; i++) {\n    for (let j = 0; j < puzzle[0].length; j++) {\n      if (puzzle[i][j] === 0) {\n        return [i, j];\n      }\n    }\n  }\n}\nfunction neighbors(status) {\n  const puzzle = JSON.parse(status);\n  const [i, j] = locateZero(puzzle);\n  const neis = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n  const validNeighbors = [];\n  for (const [di, dj] of neis) {\n    const x = i + di;\n    const y = j + dj;\n    if (x >= 0 && x < puzzle.length && y >= 0 && y < puzzle[0].length) {\n      [puzzle[i][j], puzzle[x][y]] = [puzzle[x][y], puzzle[i][j]];\n      validNeighbors.push(JSON.stringify(puzzle));\n      [puzzle[i][j], puzzle[x][y]] = [puzzle[x][y], puzzle[i][j]];\n    }\n  }\n  return validNeighbors;\n}\nfunction traceToDest(visited, dest) {\n  const path = [dest];\n  while (visited[dest] != 'null') {\n    const pre = visited[dest];\n    path.push(pre);\n    dest = pre;\n  }\n  return path.reverse();\n}\nfunction astar(puzzle, dest) {\n  const manhattans = heuristic(dest);\n  const start = JSON.stringify(puzzle);\n  const target = JSON.stringify(dest);\n  const heap = [[manhattans(start), 0, start]];\n  const visited = {};\n  visited[start] = 'null';\n  while (heap.length > 0) {\n    const [evaluate, depth, status] = heap.shift();\n    if (status === target) {\n      break;\n    }\n    for (const nei of neighbors(status)) {\n      if (!visited[nei]) {\n        visited[nei] = status;\n        heap.push([depth + 1 + manhattans(nei), depth + 1, nei]);\n      }\n    }\n    heap.sort((a, b) => a[0] - b[0]);\n  }\n  if (!visited[target]) {\n    console.log(\"invalid puzzle\");\n    return null;\n  }\n  const path = traceToDest(visited, target);\n  console.log(path);\n  return path;\n}","map":{"version":3,"names":["puzzle","shuffle","dest","createDest","astar","m","n","Array","from","length","_","i","j","parity","flatten","fill","map","Math","floor","cnt","pair","tmp","shuffled","random","slice","heuristic","locs","manhattans","status","JSON","parse","distance","x","y","manhattan","abs","locateZero","neighbors","neis","validNeighbors","di","dj","push","stringify","traceToDest","visited","path","pre","reverse","start","target","heap","evaluate","depth","shift","nei","sort","a","b","console","log"],"sources":["/home/zpc/Code/MyProjects/Huayongroad/src/AStar.js"],"sourcesContent":["puzzle = shuffle(3, 3);\ndest = createDest(3, 3);\nastar(puzzle, dest);\n\n\nfunction createDest(m, n) {\n    let dest = Array.from({ length: m }, (_, i) => Array.from({ length: n }, (_, j) => i * n + j + 1));\n    dest[m - 1][n - 1] = 0;\n    return dest;\n}\nfunction parity(puzzle) {\n    const m = puzzle.length, n = puzzle[0].length;\n    let flatten = Array(m*n).fill(null).map((_, i) => puzzle[Math.floor(i/n)][i%n]);\n    let cnt = 0, pair;\n  \n    for(let i = 0; i < m*n; i++) {\n      for(let j = i+1; j < m*n; j++) {\n        if(flatten[i] != 0 && flatten[j] != 0 && flatten[i] > flatten[j]) {\n          cnt += 1;\n          pair = [i, j];\n        }\n      }\n    }\n  \n    if(cnt % 2 == 1) {\n      let i = pair[0], j = pair[1];\n      let tmp = puzzle[Math.floor(i/n)][i%n];\n      puzzle[Math.floor(i/n)][i%n] = puzzle[Math.floor(j/n)][j%n];\n      puzzle[Math.floor(j/n)][j%n] = tmp;\n    }\n  }\n  \nfunction shuffle(m, n) {\n    let shuffled = Array.from({ length: m * n }, (_, i) => i);\n    for (let i = shuffled.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    let puzzle = Array.from({ length: m }, (_, i) => shuffled.slice(i * n, (i + 1) * n));\n    parity(puzzle);\n    return puzzle;\n}\n\nfunction heuristic(dest) {\n    const m = dest.length;\n    const n = dest[0].length;\n    const locs = Array.from({ length: m * n }, () => [0, 0]);\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            locs[dest[i][j]] = [i, j];\n        }\n    }\n    function manhattans(status) {\n    \tlet puzzle = JSON.parse(status);\n        let distance = 0;\n        for (let i = 0; i < m; i++) {\n            for (let j = 0; j < n; j++) {\n                const [x, y] = locs[puzzle[i][j]];\n                const manhattan = Math.abs(x - i) + Math.abs(y - j);\n                distance += manhattan;\n            }\n        }\n        return distance;\n    }\n    return manhattans;\n}\n\nfunction locateZero(puzzle) {\n    for (let i = 0; i < puzzle.length; i++) {\n        for (let j = 0; j < puzzle[0].length; j++) {\n            if (puzzle[i][j] === 0) {\n                return [i, j];\n            }\n        }\n    }\n}\n\nfunction neighbors(status) {\n    const puzzle = JSON.parse(status);\n    const [i, j] = locateZero(puzzle);\n    const neis = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n    const validNeighbors = [];\n    for (const [di, dj] of neis) {\n        const x = i + di;\n        const y = j + dj;\n        if (x >= 0 && x < puzzle.length && y >= 0 && y < puzzle[0].length) {\n            [puzzle[i][j], puzzle[x][y]] = [puzzle[x][y], puzzle[i][j]];\n            validNeighbors.push(JSON.stringify(puzzle));\n            [puzzle[i][j], puzzle[x][y]] = [puzzle[x][y], puzzle[i][j]];\n        }\n    }\n    return validNeighbors;\n}\n\nfunction traceToDest(visited, dest) {\n    const path = [dest];\n    while (visited[dest] != 'null') {\n        const pre = visited[dest];\n        path.push(pre);\n        dest = pre;\n    }\n    return path.reverse();\n}\n\nfunction astar(puzzle, dest) {\n    const manhattans = heuristic(dest);\n    const start = JSON.stringify(puzzle);\n    const target = JSON.stringify(dest);\n    const heap = [[manhattans(start), 0, start]];\n    const visited = {};\n    visited[start] = 'null';\n\n    while (heap.length > 0) {\n        const [evaluate, depth, status] = heap.shift();\n        if (status === target) {\n            break;\n        }\n        for (const nei of neighbors(status)) {\n            if (!visited[nei]) {\n                visited[nei] = status;\n                heap.push([depth + 1 + manhattans(nei), depth + 1, nei]);\n            }\n        }\n        heap.sort((a, b) => a[0] - b[0]);\n    }\n\n    if (!visited[target]) {\n        console.log(\"invalid puzzle\");\n        return null;\n    }\n\n    const path = traceToDest(visited, target);\n    console.log(path);\n    return path;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}