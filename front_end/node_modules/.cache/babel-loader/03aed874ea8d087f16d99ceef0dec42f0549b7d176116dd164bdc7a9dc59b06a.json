{"ast":null,"code":"function createDest(m, n) {\n  let dest = Array.from({\n    length: m\n  }, (_, i) => Array.from({\n    length: n\n  }, (_, j) => i * n + j + 1));\n  dest[m - 1][n - 1] = 0;\n  return dest;\n}\nfunction parity(puzzle) {\n  const m = puzzle.length,\n    n = puzzle[0].length;\n  let flatten = Array(m * n).fill(null).map((_, i) => puzzle[Math.floor(i / n)][i % n]);\n  let cnt = 0,\n    pair;\n  for (let i = 0; i < m * n; i++) {\n    for (let j = i + 1; j < m * n; j++) {\n      if (flatten[i] != 0 && flatten[j] != 0 && flatten[i] > flatten[j]) {\n        cnt += 1;\n        pair = [i, j];\n      }\n    }\n  }\n  if (cnt % 2 == 1) {\n    let i = pair[0],\n      j = pair[1];\n    let tmp = puzzle[Math.floor(i / n)][i % n];\n    puzzle[Math.floor(i / n)][i % n] = puzzle[Math.floor(j / n)][j % n];\n    puzzle[Math.floor(j / n)][j % n] = tmp;\n  }\n}\nfunction shuffle(m, n) {\n  let shuffled = Array.from({\n    length: m * n\n  }, (_, i) => i);\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n  }\n  let puzzle = Array.from({\n    length: m\n  }, (_, i) => shuffled.slice(i * n, (i + 1) * n));\n  parity(puzzle);\n  return puzzle;\n}\nfunction heuristic(dest) {\n  const m = dest.length;\n  const n = dest[0].length;\n  const locs = Array.from({\n    length: m * n\n  }, () => [0, 0]);\n  for (let i = 0; i < m; i++) {\n    for (let j = 0; j < n; j++) {\n      locs[dest[i][j]] = [i, j];\n    }\n  }\n  function manhattans(status) {\n    let puzzle = JSON.parse(status);\n    let distance = 0;\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        const [x, y] = locs[puzzle[i][j]];\n        const manhattan = Math.abs(x - i) + Math.abs(y - j);\n        distance += manhattan;\n      }\n    }\n    return distance;\n  }\n  return manhattans;\n}\nfunction locateZero(puzzle) {\n  for (let i = 0; i < puzzle.length; i++) {\n    for (let j = 0; j < puzzle[0].length; j++) {\n      if (puzzle[i][j] === 0) {\n        return [i, j];\n      }\n    }\n  }\n}\nfunction neighbors(status) {\n  const puzzle = JSON.parse(status);\n  const [i, j] = locateZero(puzzle);\n  const neis = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n  const validNeighbors = [];\n  for (const [di, dj] of neis) {\n    const x = i + di;\n    const y = j + dj;\n    if (x >= 0 && x < puzzle.length && y >= 0 && y < puzzle[0].length) {\n      [puzzle[i][j], puzzle[x][y]] = [puzzle[x][y], puzzle[i][j]];\n      validNeighbors.push([JSON.stringify(puzzle), puzzle[i][j]]);\n      [puzzle[i][j], puzzle[x][y]] = [puzzle[x][y], puzzle[i][j]];\n    }\n  }\n  return validNeighbors;\n}\nfunction traceToDest(visited, dest) {\n  const path = [dest];\n  const slides = [];\n  while (visited[dest][0] != 'null') {\n    const [pre, slide] = visited[dest];\n    path.push(pre);\n    slides.push(slide);\n    dest = pre;\n  }\n  return [path.reverse(), slides.reverse()];\n}\nexport function astar(puzzle, dest) {\n  const manhattans = heuristic(dest);\n  const start = JSON.stringify(puzzle);\n  const target = JSON.stringify(dest);\n  const heap = [[manhattans(start), 0, start]];\n  const visited = {};\n  visited[start] = ['null', null];\n  while (heap.length > 0) {\n    const [evaluate, depth, [status, _]] = heap.shift();\n    if (status === target) {\n      break;\n    }\n    for (const [nei, slide] of neighbors(status)) {\n      if (!visited[nei]) {\n        visited[nei] = [status, slide];\n        heap.push([depth + 1 + manhattans(nei), depth + 1, nei]);\n      }\n    }\n    heap.sort((a, b) => a[0] - b[0]);\n  }\n  if (!visited[target]) {\n    console.log(\"invalid puzzle\");\n    return null;\n  }\n  const [path, slides] = traceToDest(visited, target);\n  console.log(path);\n  return slides;\n}","map":{"version":3,"names":["createDest","m","n","dest","Array","from","length","_","i","j","parity","puzzle","flatten","fill","map","Math","floor","cnt","pair","tmp","shuffle","shuffled","random","slice","heuristic","locs","manhattans","status","JSON","parse","distance","x","y","manhattan","abs","locateZero","neighbors","neis","validNeighbors","di","dj","push","stringify","traceToDest","visited","path","slides","pre","slide","reverse","astar","start","target","heap","evaluate","depth","shift","nei","sort","a","b","console","log"],"sources":["/home/zpc/Code/MyProjects/Huayongroad/src/AStar.js"],"sourcesContent":["function createDest(m, n) {\n    let dest = Array.from({ length: m }, (_, i) => Array.from({ length: n }, (_, j) => i * n + j + 1));\n    dest[m - 1][n - 1] = 0;\n    return dest;\n}\nfunction parity(puzzle) {\n    const m = puzzle.length, n = puzzle[0].length;\n    let flatten = Array(m*n).fill(null).map((_, i) => puzzle[Math.floor(i/n)][i%n]);\n    let cnt = 0, pair;\n  \n    for(let i = 0; i < m*n; i++) {\n      for(let j = i+1; j < m*n; j++) {\n        if(flatten[i] != 0 && flatten[j] != 0 && flatten[i] > flatten[j]) {\n          cnt += 1;\n          pair = [i, j];\n        }\n      }\n    }\n  \n    if(cnt % 2 == 1) {\n      let i = pair[0], j = pair[1];\n      let tmp = puzzle[Math.floor(i/n)][i%n];\n      puzzle[Math.floor(i/n)][i%n] = puzzle[Math.floor(j/n)][j%n];\n      puzzle[Math.floor(j/n)][j%n] = tmp;\n    }\n  }\n  \nfunction shuffle(m, n) {\n    let shuffled = Array.from({ length: m * n }, (_, i) => i);\n    for (let i = shuffled.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n    let puzzle = Array.from({ length: m }, (_, i) => shuffled.slice(i * n, (i + 1) * n));\n    parity(puzzle);\n    return puzzle;\n}\n\nfunction heuristic(dest) {\n    const m = dest.length;\n    const n = dest[0].length;\n    const locs = Array.from({ length: m * n }, () => [0, 0]);\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            locs[dest[i][j]] = [i, j];\n        }\n    }\n    function manhattans(status) {\n    \tlet puzzle = JSON.parse(status);\n        let distance = 0;\n        for (let i = 0; i < m; i++) {\n            for (let j = 0; j < n; j++) {\n                const [x, y] = locs[puzzle[i][j]];\n                const manhattan = Math.abs(x - i) + Math.abs(y - j);\n                distance += manhattan;\n            }\n        }\n        return distance;\n    }\n    return manhattans;\n}\n\nfunction locateZero(puzzle) {\n    for (let i = 0; i < puzzle.length; i++) {\n        for (let j = 0; j < puzzle[0].length; j++) {\n            if (puzzle[i][j] === 0) {\n                return [i, j];\n            }\n        }\n    }\n}\n\nfunction neighbors(status) {\n    const puzzle = JSON.parse(status);\n    const [i, j] = locateZero(puzzle);\n    const neis = [[1, 0], [-1, 0], [0, 1], [0, -1]];\n    const validNeighbors = [];\n    for (const [di, dj] of neis) {\n        const x = i + di;\n        const y = j + dj;\n        if (x >= 0 && x < puzzle.length && y >= 0 && y < puzzle[0].length) {\n            [puzzle[i][j], puzzle[x][y]] = [puzzle[x][y], puzzle[i][j]];\n            validNeighbors.push([JSON.stringify(puzzle), puzzle[i][j]]);\n            [puzzle[i][j], puzzle[x][y]] = [puzzle[x][y], puzzle[i][j]];\n        }\n    }\n    return validNeighbors;\n}\n\nfunction traceToDest(visited, dest) {\n    const path = [dest];\n    const slides = [];\n    while (visited[dest][0] != 'null') {\n        const [pre, slide] = visited[dest];\n        path.push(pre);\n        slides.push(slide)\n        dest = pre;\n    }\n    return [path.reverse(), slides.reverse()];\n}\n\nexport function astar(puzzle, dest) {\n    const manhattans = heuristic(dest);\n    const start = JSON.stringify(puzzle);\n    const target = JSON.stringify(dest);\n    const heap = [[manhattans(start), 0, start]];\n    const visited = {};\n    visited[start] = ['null', null];\n\n    while (heap.length > 0) {\n        const [evaluate, depth, [status, _]] = heap.shift();\n        if (status === target) {\n            break;\n        }\n        for (const [nei, slide] of neighbors(status)) {\n            if (!visited[nei]) {\n                visited[nei] = [status, slide];\n                heap.push([depth + 1 + manhattans(nei), depth + 1, nei]);\n            }\n        }\n        heap.sort((a, b) => a[0] - b[0]);\n    }\n\n    if (!visited[target]) {\n        console.log(\"invalid puzzle\");\n        return null;\n    }\n\n    const [path, slides] = traceToDest(visited, target);\n    console.log(path);\n    return slides;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}